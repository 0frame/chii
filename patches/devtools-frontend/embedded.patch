From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: redhoodsu <redhoodsu@tencent.com>
Date: Sun, 17 Jul 2022 12:28:39 +0800
Subject: embedded


diff --git a/front_end/core/root/Runtime.ts b/front_end/core/root/Runtime.ts
index 10d9a9302979095e6047aa1fcedbe7e761dfe637..e903490d9c7e58a8123417dbc68365a2165ba7cd 100644
--- a/front_end/core/root/Runtime.ts
+++ b/front_end/core/root/Runtime.ts
@@ -5,7 +5,7 @@
 const originalConsole = console;
 const originalAssert = console.assert;
 
-const queryParamsObject = new URLSearchParams(location.search);
+const queryParamsObject = new URLSearchParams(location.search || location.hash.replace(/^#/, ''));
 
 // The following variable are initialized all the way at the bottom of this file
 let importScriptPathPrefix: string;
diff --git a/front_end/core/sdk/Connections.ts b/front_end/core/sdk/Connections.ts
index cfa1ca58f1d45d5034731cae037e91364be9de6e..6a575078a98de2df5deacd02469b7c038f16696c 100644
--- a/front_end/core/sdk/Connections.ts
+++ b/front_end/core/sdk/Connections.ts
@@ -75,6 +75,31 @@ export class MainConnection implements ProtocolClient.InspectorBackend.Connectio
   }
 }
 
+export class EmbeddedConnection implements ProtocolClient.InspectorBackend.Connection {
+  onMessage: ((arg0: Object) => void) | null;
+  private targetOrigin: string = '';
+  constructor(targetOrigin: string) {
+    this.targetOrigin = targetOrigin;
+    this.onMessage = null;
+    window.addEventListener('message', event => {
+      if (event.origin === this.targetOrigin && this.onMessage) {
+        this.onMessage(event.data);
+      }
+    })
+  }
+  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {
+    this.onMessage = onMessage;
+  }
+  sendRawMessage(message: string): void {
+    window.parent.postMessage(message, this.targetOrigin);
+  }
+  setOnDisconnect(onDisconnect: (arg0: string) => void): void {
+  }
+  disconnect(): Promise<void> {
+    return Promise.resolve();
+  }
+}
+
 export class WebSocketConnection implements ProtocolClient.InspectorBackend.Connection {
   #socket: WebSocket|null;
   onMessage: ((arg0: (Object|string)) => void)|null;
@@ -280,6 +305,10 @@ export async function initMainConnection(
 function createMainConnection(websocketConnectionLost: () => void): ProtocolClient.InspectorBackend.Connection {
   const wsParam = Root.Runtime.Runtime.queryParam('ws');
   const wssParam = Root.Runtime.Runtime.queryParam('wss');
+  const embeddedParam = Root.Runtime.Runtime.queryParam('embedded');
+  if (embeddedParam) {
+    return new EmbeddedConnection(embeddedParam)
+  }
   if (wsParam || wssParam) {
     const ws = wsParam ? `ws://${wsParam}` : `wss://${wssParam}`;
     return new WebSocketConnection(ws, websocketConnectionLost);
diff --git a/front_end/entrypoint_template.html b/front_end/entrypoint_template.html
index 1edaec9604cadb3dc01ff4ace55c41090cd13fc8..c32adb74b2db2d0a0758d18b84c7ce049d3eb1e7 100644
--- a/front_end/entrypoint_template.html
+++ b/front_end/entrypoint_template.html
@@ -14,7 +14,6 @@
     }
   }
 </style>
-<meta http-equiv="Content-Security-Policy" content="object-src 'none'; script-src 'self' 'unsafe-eval' https://chrome-devtools-frontend.appspot.com">
 <meta name="referrer" content="no-referrer">
 <script type="module" src="./entrypoints/%ENTRYPOINT_NAME%/%ENTRYPOINT_NAME%.js"></script>
 <body class="undocked" id="-blink-dev-tools">
